


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000                 REQUIRE8
    4 00000000                 PRESERVE8
    5 00000000         
    6 00000000        0 
                       PCM     RN               r0
    7 00000000        1 
                       VB1     RN               r1
    8 00000000        2 
                       COEF    RN               r2
    9 00000000         
   10 00000000        0 
                       VLO     RN               r0
   11 00000000        3 
                       VHI     RN               r3
   12 00000000         
   13 00000000        4 
                       SUM1LL  RN               r4
   14 00000000        5 
                       SUM1LH  RN               r5
   15 00000000        6 
                       SUM2LL  RN               r6
   16 00000000        7 
                       SUM2LH  RN               r7
   17 00000000        8 
                       SUM1RL  RN               r8
   18 00000000        9 
                       SUM1RH  RN               r9
   19 00000000        A 
                       SUM2RL  RN               r10
   20 00000000        B 
                       SUM2RH  RN               r11
   21 00000000         
   22 00000000        C 
                       CF1     RN               r12
   23 00000000        E 
                       CF2     RN               r14
   24 00000000         
   25 00000000        C 
                       SIGN    RN               r12
   26 00000000        E 
                       MAXPOS  RN               r14
   27 00000000         
   28 00000000        C 
                       I       RN               r12
   29 00000000         
   30 00000000                 GBLA             RNDVAL
   31 00000000 02000000 
                       RNDVAL  SETA             (1 << ((32 - 12) + (6 - 1)))
   32 00000000         
   33 00000000         ; C64TOS - clip 64-bit accumulator to short (no rounding
                       )
   34 00000000         ;   xl, xh = value (lo 32, hi 32)
   35 00000000         ;   input assumed to have 6 fraction bits
   36 00000000         ;   sign = temp variable to use for sign
   37 00000000         ;   maxPos = 0x00007fff (takes 2 instr. to generate - ca
                       lculating



ARM Macro Assembler    Page 2 


   38 00000000         ;              once and using repeatedly saves if you do
                        several CTOS in a row) */
   39 00000000                 MACRO
   40 00000000                 C64TOS           $xl, $xh, $sign, $maxPos
   41 00000000         
   42 00000000                 mov              $xl, $xl, lsr #(20+6)
   43 00000000                 orr              $xl, $xl, $xh, lsl #(12-6)
   44 00000000                 mov              $sign, $xl, ASR #31
   45 00000000                 cmp              $sign, $xl, ASR #15
   46 00000000                 it               ne
   47 00000000                 eorne            $xl, $sign, $maxPos
   48 00000000                 MEND                         ; C64TOS
   49 00000000         
   50 00000000         ; MC0S - process 2 taps, 1 sample per channel (sample 0)
                        */
   51 00000000         ;   x = vb1 offset */
   52 00000000                 MACRO
   53 00000000                 MC0S             $x
   54 00000000         
   55 00000000                 ldr              CF1, [COEF], #4
   56 00000000                 ldr              CF2, [COEF], #4
   57 00000000                 ldr              VLO, [VB1, #(4*($x))]
   58 00000000                 ldr              VHI, [VB1, #(4*(23 - $x))]
   59 00000000         
   60 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000000                 ldr              VLO, [VB1, #(4*(32 + $x))]
   62 00000000                 rsb              CF2, CF2, #0
   63 00000000                 smlal            SUM1LL, SUM1LH, VHI, CF2
   64 00000000                 ldr              VHI, [VB1, #(4*(32 + 23 - $x))]
   65 00000000         
   66 00000000                 smlal            SUM1RL, SUM1RH, VLO, CF1
   67 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000000         
   69 00000000                 MEND                         ; MCOS
   70 00000000         
   71 00000000         ; MC1S - process 2 taps, 1 sample per channel (sample 16
                       )
   72 00000000         ;   x = vb1 offset
   73 00000000                 MACRO
   74 00000000                 MC1S             $x
   75 00000000         
   76 00000000                 ldr              CF1, [COEF], #4
   77 00000000                 ldr              VLO, [VB1, #(4*($x))]
   78 00000000                 ldr              VHI, [VB1, #(4*(32 + $x))]
   79 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1
   80 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF1
   81 00000000         
   82 00000000                 MEND                         ; MC1S
   83 00000000         
   84 00000000         ; MC2S - process 2 taps, 2 samples per channel
   85 00000000         ;   x = vb1 offset
   86 00000000                 MACRO
   87 00000000                 MC2S             $x
   88 00000000         
   89 00000000         ; load data as far as possible in advance of using it
   90 00000000                 ldr              CF1, [COEF], #4
   91 00000000                 ldr              CF2, [COEF], #4
   92 00000000                 ldr              VLO, [VB1, #(4*($x))]
   93 00000000                 ldr              VHI, [VB1, #(4*(23 - $x))]



ARM Macro Assembler    Page 3 


   94 00000000         
   95 00000000                 smlal            SUM1LL, SUM1LH, VLO, CF1
   96 00000000                 smlal            SUM2LL, SUM2LH, VLO, CF2
   97 00000000                 rsb              CF2, CF2, #0
   98 00000000                 smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000000                 smlal            SUM1LL, SUM1LH, VHI, CF2
  100 00000000         
  101 00000000                 ldr              VHI, [VB1, #(4*(32 + 23 - $x))]
  102 00000000                 ldr              VLO, [VB1, #(4*(32 + $x))]
  103 00000000         
  104 00000000                 smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000000                 smlal            SUM2RL, SUM2RH, VHI, CF1
  106 00000000                 rsb              CF2, CF2, #0
  107 00000000                 smlal            SUM1RL, SUM1RH, VLO, CF1
  108 00000000                 smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000000         
  110 00000000                 MEND                         ; MC2S
  111 00000000         
  112 00000000         
  113 00000000         ; void PolyphaseStereo(short *pcm, int *vbuf, const int 
                       *coefBase)
  114 00000000         xmp3_PolyphaseStereo
                               PROC
  115 00000000                 EXPORT           xmp3_PolyphaseStereo
  116 00000000         
  117 00000000 E92D 4FF0       stmfd            sp!, {r4-r11, r14}
  118 00000004         
  119 00000004         ; clear out stack space for 2 local variables (4 bytes e
                       ach)
  120 00000004 B082            sub              sp, sp, #8
  121 00000006 9001            str              PCM , [sp, #4] ; sp[1] = pcm po
                                                            inter
  122 00000008         
  123 00000008         ; special case, output sample 0
  124 00000008 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  125 0000000C F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  126 00000010 F04F 0500       mov              SUM1LH, #0
  127 00000014 F04F 0900       mov              SUM1RH, #0
  128 00000018         
  129 00000018                 MC0S             0
   54 00000018         
   55 00000018 F852 CB04       ldr              CF1, [COEF], #4
   56 0000001C F852 EB04       ldr              CF2, [COEF], #4
   57 00000020 6808            ldr              VLO, [VB1, #(4*(0))]
   58 00000022 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
   59 00000024         
   60 00000024 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000028 F8D1 0080       ldr              VLO, [VB1, #(4*(32 + 0))]
   62 0000002C F1CE 0E00       rsb              CF2, CF2, #0
   63 00000030 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 00000034 F8D1 30DC       ldr              VHI, [VB1, #(4*(32 + 23 - 0))]
   65 00000038         
   66 00000038 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 0000003C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000040         
  130 00000040                 MC0S             1
   54 00000040         



ARM Macro Assembler    Page 4 


   55 00000040 F852 CB04       ldr              CF1, [COEF], #4
   56 00000044 F852 EB04       ldr              CF2, [COEF], #4
   57 00000048 6848            ldr              VLO, [VB1, #(4*(1))]
   58 0000004A 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
   59 0000004C         
   60 0000004C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000050 F8D1 0084       ldr              VLO, [VB1, #(4*(32 + 1))]
   62 00000054 F1CE 0E00       rsb              CF2, CF2, #0
   63 00000058 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 0000005C F8D1 30D8       ldr              VHI, [VB1, #(4*(32 + 23 - 1))]
   65 00000060         
   66 00000060 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 00000064 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000068         
  131 00000068                 MC0S             2
   54 00000068         
   55 00000068 F852 CB04       ldr              CF1, [COEF], #4
   56 0000006C F852 EB04       ldr              CF2, [COEF], #4
   57 00000070 6888            ldr              VLO, [VB1, #(4*(2))]
   58 00000072 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
   59 00000074         
   60 00000074 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000078 F8D1 0088       ldr              VLO, [VB1, #(4*(32 + 2))]
   62 0000007C F1CE 0E00       rsb              CF2, CF2, #0
   63 00000080 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 00000084 F8D1 30D4       ldr              VHI, [VB1, #(4*(32 + 23 - 2))]
   65 00000088         
   66 00000088 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 0000008C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000090         
  132 00000090                 MC0S             3
   54 00000090         
   55 00000090 F852 CB04       ldr              CF1, [COEF], #4
   56 00000094 F852 EB04       ldr              CF2, [COEF], #4
   57 00000098 68C8            ldr              VLO, [VB1, #(4*(3))]
   58 0000009A 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
   59 0000009C         
   60 0000009C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 000000A0 F8D1 008C       ldr              VLO, [VB1, #(4*(32 + 3))]
   62 000000A4 F1CE 0E00       rsb              CF2, CF2, #0
   63 000000A8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 000000AC F8D1 30D0       ldr              VHI, [VB1, #(4*(32 + 23 - 3))]
   65 000000B0         
   66 000000B0 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 000000B4 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 000000B8         
  133 000000B8                 MC0S             4
   54 000000B8         
   55 000000B8 F852 CB04       ldr              CF1, [COEF], #4
   56 000000BC F852 EB04       ldr              CF2, [COEF], #4
   57 000000C0 6908            ldr              VLO, [VB1, #(4*(4))]
   58 000000C2 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
   59 000000C4         
   60 000000C4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 000000C8 F8D1 0090       ldr              VLO, [VB1, #(4*(32 + 4))]
   62 000000CC F1CE 0E00       rsb              CF2, CF2, #0
   63 000000D0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 000000D4 F8D1 30CC       ldr              VHI, [VB1, #(4*(32 + 23 - 4))]
   65 000000D8         



ARM Macro Assembler    Page 5 


   66 000000D8 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 000000DC FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 000000E0         
  134 000000E0                 MC0S             5
   54 000000E0         
   55 000000E0 F852 CB04       ldr              CF1, [COEF], #4
   56 000000E4 F852 EB04       ldr              CF2, [COEF], #4
   57 000000E8 6948            ldr              VLO, [VB1, #(4*(5))]
   58 000000EA 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
   59 000000EC         
   60 000000EC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 000000F0 F8D1 0094       ldr              VLO, [VB1, #(4*(32 + 5))]
   62 000000F4 F1CE 0E00       rsb              CF2, CF2, #0
   63 000000F8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 000000FC F8D1 30C8       ldr              VHI, [VB1, #(4*(32 + 23 - 5))]
   65 00000100         
   66 00000100 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 00000104 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000108         
  135 00000108                 MC0S             6
   54 00000108         
   55 00000108 F852 CB04       ldr              CF1, [COEF], #4
   56 0000010C F852 EB04       ldr              CF2, [COEF], #4
   57 00000110 6988            ldr              VLO, [VB1, #(4*(6))]
   58 00000112 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
   59 00000114         
   60 00000114 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000118 F8D1 0098       ldr              VLO, [VB1, #(4*(32 + 6))]
   62 0000011C F1CE 0E00       rsb              CF2, CF2, #0
   63 00000120 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 00000124 F8D1 30C4       ldr              VHI, [VB1, #(4*(32 + 23 - 6))]
   65 00000128         
   66 00000128 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 0000012C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000130         
  136 00000130                 MC0S             7
   54 00000130         
   55 00000130 F852 CB04       ldr              CF1, [COEF], #4
   56 00000134 F852 EB04       ldr              CF2, [COEF], #4
   57 00000138 69C8            ldr              VLO, [VB1, #(4*(7))]
   58 0000013A 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
   59 0000013C         
   60 0000013C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   61 00000140 F8D1 009C       ldr              VLO, [VB1, #(4*(32 + 7))]
   62 00000144 F1CE 0E00       rsb              CF2, CF2, #0
   63 00000148 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
   64 0000014C F8D1 30C0       ldr              VHI, [VB1, #(4*(32 + 23 - 7))]
   65 00000150         
   66 00000150 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
   67 00000154 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
   68 00000158         
  137 00000158         
  138 00000158 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  139 0000015A F44F 4EFE       mov              MAXPOS, #0x7f00
  140 0000015E F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  141 00000162         
  142 00000162                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 00000162         



ARM Macro Assembler    Page 6 


   42 00000162 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 00000166 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 0000016A EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 0000016E EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 00000172 BF18            it               ne
   47 00000174 EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  143 00000178                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   41 00000178         
   42 00000178 EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)
   43 0000017C EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1
2-6)
   44 00000180 EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   45 00000184 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   46 00000188 BF18            it               ne
   47 0000018A EA8C 080E       eorne            SUM1RL, SIGN, MAXPOS
  144 0000018E         
  145 0000018E 8004            strh             SUM1LL, [PCM, #(2*0)]
  146 00000190 F8A0 8002       strh             SUM1RL, [PCM, #(2*1)]
  147 00000194         
  148 00000194         ; special case, output sample 16
  149 00000194 F502 7270       add              COEF, COEF, #(4*(256-16)) ; coe
                                                            f = coefBase + 256 
                                                            (was coefBase + 16 
                                                            after MC0S block)
  150 00000198 F501 5180       add              VB1, VB1, #(4*1024) ; vb1 = vbu
                                                            f + 64*16
  151 0000019C         
  152 0000019C F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  153 000001A0 F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  154 000001A4 F04F 0500       mov              SUM1LH, #0
  155 000001A8 F04F 0900       mov              SUM1RH, #0
  156 000001AC         
  157 000001AC                 MC1S             0
   75 000001AC         
   76 000001AC F852 CB04       ldr              CF1, [COEF], #4
   77 000001B0 6808            ldr              VLO, [VB1, #(4*(0))]
   78 000001B2 F8D1 3080       ldr              VHI, [VB1, #(4*(32 + 0))]
   79 000001B6 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 000001BA FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 000001BE         
  158 000001BE                 MC1S             1
   75 000001BE         
   76 000001BE F852 CB04       ldr              CF1, [COEF], #4
   77 000001C2 6848            ldr              VLO, [VB1, #(4*(1))]
   78 000001C4 F8D1 3084       ldr              VHI, [VB1, #(4*(32 + 1))]
   79 000001C8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 000001CC FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 000001D0         
  159 000001D0                 MC1S             2
   75 000001D0         
   76 000001D0 F852 CB04       ldr              CF1, [COEF], #4
   77 000001D4 6888            ldr              VLO, [VB1, #(4*(2))]
   78 000001D6 F8D1 3088       ldr              VHI, [VB1, #(4*(32 + 2))]
   79 000001DA FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 000001DE FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 000001E2         



ARM Macro Assembler    Page 7 


  160 000001E2                 MC1S             3
   75 000001E2         
   76 000001E2 F852 CB04       ldr              CF1, [COEF], #4
   77 000001E6 68C8            ldr              VLO, [VB1, #(4*(3))]
   78 000001E8 F8D1 308C       ldr              VHI, [VB1, #(4*(32 + 3))]
   79 000001EC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 000001F0 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 000001F4         
  161 000001F4                 MC1S             4
   75 000001F4         
   76 000001F4 F852 CB04       ldr              CF1, [COEF], #4
   77 000001F8 6908            ldr              VLO, [VB1, #(4*(4))]
   78 000001FA F8D1 3090       ldr              VHI, [VB1, #(4*(32 + 4))]
   79 000001FE FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 00000202 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 00000206         
  162 00000206                 MC1S             5
   75 00000206         
   76 00000206 F852 CB04       ldr              CF1, [COEF], #4
   77 0000020A 6948            ldr              VLO, [VB1, #(4*(5))]
   78 0000020C F8D1 3094       ldr              VHI, [VB1, #(4*(32 + 5))]
   79 00000210 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 00000214 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 00000218         
  163 00000218                 MC1S             6
   75 00000218         
   76 00000218 F852 CB04       ldr              CF1, [COEF], #4
   77 0000021C 6988            ldr              VLO, [VB1, #(4*(6))]
   78 0000021E F8D1 3098       ldr              VHI, [VB1, #(4*(32 + 6))]
   79 00000222 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 00000226 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 0000022A         
  164 0000022A                 MC1S             7
   75 0000022A         
   76 0000022A F852 CB04       ldr              CF1, [COEF], #4
   77 0000022E 69C8            ldr              VLO, [VB1, #(4*(7))]
   78 00000230 F8D1 309C       ldr              VHI, [VB1, #(4*(32 + 7))]
   79 00000234 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   80 00000238 FBC3 890C       smlal            SUM1RL, SUM1RH, VHI, CF1
   81 0000023C         
  165 0000023C         
  166 0000023C 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  167 0000023E F44F 4EFE       mov              MAXPOS, #0x7f00
  168 00000242 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  169 00000246         
  170 00000246                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 00000246         
   42 00000246 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 0000024A EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 0000024E EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 00000252 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 00000256 BF18            it               ne
   47 00000258 EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  171 0000025C                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   41 0000025C         
   42 0000025C EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)
   43 00000260 EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1



ARM Macro Assembler    Page 8 


2-6)
   44 00000264 EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   45 00000268 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   46 0000026C BF18            it               ne
   47 0000026E EA8C 080E       eorne            SUM1RL, SIGN, MAXPOS
  172 00000272         
  173 00000272 F8A0 4040       strh             SUM1LL, [PCM, #(2*(2*16+0))]
  174 00000276 F8A0 8042       strh             SUM1RL, [PCM, #(2*(2*16+1))]
  175 0000027A         
  176 0000027A         ; main convolution loop: sum1L = samples 1, 2, 3, ... 15
                          sum2L = samples 31, 30, ... 17
  177 0000027A F5A2 7278       sub              COEF, COEF, #(4*(264-16)) ; coe
                                                            f = coefBase + 16 (
                                                            was coefBase + 264 
                                                            after MC1S block)
  178 0000027E F5A1 6170       sub              VB1, VB1, #(4*(1024-64)) ; vb1 
                                                            = vbuf + 64 (was vb
                                                            uf + 64*16 after MC
                                                            1S block)
  179 00000282 F04F 0C0F       mov              I, #15      ; loop counter, cou
                                                            nt down
  180 00000286 F100 0004       add              PCM, PCM, #(2*2) ; pcm+=2
  181 0000028A         
  182 0000028A         LoopPS
  183 0000028A F8CD C000       str              I, [sp, #0] ; sp[0] = i (loop c
                                                            ounter)
  184 0000028E 9001            str              PCM, [sp, #4] ; sp[1] = pcm (po
                                                            inter to pcm buffer
                                                            )
  185 00000290         
  186 00000290 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  187 00000294 F04F 7800       mov              SUM1RL, #RNDVAL ; load rndVal (
                                                            low 32)
  188 00000298 F04F 7600       mov              SUM2LL, #RNDVAL ; load rndVal (
                                                            low 32)
  189 0000029C F04F 7A00       mov              SUM2RL, #RNDVAL ; load rndVal (
                                                            low 32)
  190 000002A0         
  191 000002A0 F04F 0500       mov              SUM1LH, #0
  192 000002A4 F04F 0900       mov              SUM1RH, #0
  193 000002A8 F04F 0700       mov              SUM2LH, #0
  194 000002AC F04F 0B00       mov              SUM2RH, #0
  195 000002B0         
  196 000002B0                 MC2S             0
   88 000002B0         
   89 000002B0         ; load data as far as possible in advance of using it
   90 000002B0 F852 CB04       ldr              CF1, [COEF], #4
   91 000002B4 F852 EB04       ldr              CF2, [COEF], #4
   92 000002B8 6808            ldr              VLO, [VB1, #(4*(0))]
   93 000002BA 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
   94 000002BC         
   95 000002BC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 000002C0 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 000002C4 F1CE 0E00       rsb              CF2, CF2, #0
   98 000002C8 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 000002CC FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 000002D0         
  101 000002D0 F8D1 30DC       ldr              VHI, [VB1, #(4*(32 + 23 - 0))]



ARM Macro Assembler    Page 9 


  102 000002D4 F8D1 0080       ldr              VLO, [VB1, #(4*(32 + 0))]
  103 000002D8         
  104 000002D8 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 000002DC FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 000002E0 F1CE 0E00       rsb              CF2, CF2, #0
  107 000002E4 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 000002E8 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 000002EC         
  197 000002EC                 MC2S             1
   88 000002EC         
   89 000002EC         ; load data as far as possible in advance of using it
   90 000002EC F852 CB04       ldr              CF1, [COEF], #4
   91 000002F0 F852 EB04       ldr              CF2, [COEF], #4
   92 000002F4 6848            ldr              VLO, [VB1, #(4*(1))]
   93 000002F6 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
   94 000002F8         
   95 000002F8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 000002FC FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 00000300 F1CE 0E00       rsb              CF2, CF2, #0
   98 00000304 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000308 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 0000030C         
  101 0000030C F8D1 30D8       ldr              VHI, [VB1, #(4*(32 + 23 - 1))]
  102 00000310 F8D1 0084       ldr              VLO, [VB1, #(4*(32 + 1))]
  103 00000314         
  104 00000314 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000318 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 0000031C F1CE 0E00       rsb              CF2, CF2, #0
  107 00000320 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 00000324 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000328         
  198 00000328                 MC2S             2
   88 00000328         
   89 00000328         ; load data as far as possible in advance of using it
   90 00000328 F852 CB04       ldr              CF1, [COEF], #4
   91 0000032C F852 EB04       ldr              CF2, [COEF], #4
   92 00000330 6888            ldr              VLO, [VB1, #(4*(2))]
   93 00000332 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
   94 00000334         
   95 00000334 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 00000338 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 0000033C F1CE 0E00       rsb              CF2, CF2, #0
   98 00000340 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000344 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 00000348         
  101 00000348 F8D1 30D4       ldr              VHI, [VB1, #(4*(32 + 23 - 2))]
  102 0000034C F8D1 0088       ldr              VLO, [VB1, #(4*(32 + 2))]
  103 00000350         
  104 00000350 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000354 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 00000358 F1CE 0E00       rsb              CF2, CF2, #0
  107 0000035C FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 00000360 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000364         
  199 00000364                 MC2S             3
   88 00000364         
   89 00000364         ; load data as far as possible in advance of using it
   90 00000364 F852 CB04       ldr              CF1, [COEF], #4
   91 00000368 F852 EB04       ldr              CF2, [COEF], #4



ARM Macro Assembler    Page 10 


   92 0000036C 68C8            ldr              VLO, [VB1, #(4*(3))]
   93 0000036E 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
   94 00000370         
   95 00000370 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 00000374 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 00000378 F1CE 0E00       rsb              CF2, CF2, #0
   98 0000037C FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000380 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 00000384         
  101 00000384 F8D1 30D0       ldr              VHI, [VB1, #(4*(32 + 23 - 3))]
  102 00000388 F8D1 008C       ldr              VLO, [VB1, #(4*(32 + 3))]
  103 0000038C         
  104 0000038C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000390 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 00000394 F1CE 0E00       rsb              CF2, CF2, #0
  107 00000398 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 0000039C FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 000003A0         
  200 000003A0                 MC2S             4
   88 000003A0         
   89 000003A0         ; load data as far as possible in advance of using it
   90 000003A0 F852 CB04       ldr              CF1, [COEF], #4
   91 000003A4 F852 EB04       ldr              CF2, [COEF], #4
   92 000003A8 6908            ldr              VLO, [VB1, #(4*(4))]
   93 000003AA 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
   94 000003AC         
   95 000003AC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 000003B0 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 000003B4 F1CE 0E00       rsb              CF2, CF2, #0
   98 000003B8 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 000003BC FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 000003C0         
  101 000003C0 F8D1 30CC       ldr              VHI, [VB1, #(4*(32 + 23 - 4))]
  102 000003C4 F8D1 0090       ldr              VLO, [VB1, #(4*(32 + 4))]
  103 000003C8         
  104 000003C8 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 000003CC FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 000003D0 F1CE 0E00       rsb              CF2, CF2, #0
  107 000003D4 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 000003D8 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 000003DC         
  201 000003DC                 MC2S             5
   88 000003DC         
   89 000003DC         ; load data as far as possible in advance of using it
   90 000003DC F852 CB04       ldr              CF1, [COEF], #4
   91 000003E0 F852 EB04       ldr              CF2, [COEF], #4
   92 000003E4 6948            ldr              VLO, [VB1, #(4*(5))]
   93 000003E6 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
   94 000003E8         
   95 000003E8 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 000003EC FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 000003F0 F1CE 0E00       rsb              CF2, CF2, #0
   98 000003F4 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 000003F8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 000003FC         
  101 000003FC F8D1 30C8       ldr              VHI, [VB1, #(4*(32 + 23 - 5))]
  102 00000400 F8D1 0094       ldr              VLO, [VB1, #(4*(32 + 5))]
  103 00000404         
  104 00000404 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2



ARM Macro Assembler    Page 11 


  105 00000408 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 0000040C F1CE 0E00       rsb              CF2, CF2, #0
  107 00000410 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 00000414 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000418         
  202 00000418                 MC2S             6
   88 00000418         
   89 00000418         ; load data as far as possible in advance of using it
   90 00000418 F852 CB04       ldr              CF1, [COEF], #4
   91 0000041C F852 EB04       ldr              CF2, [COEF], #4
   92 00000420 6988            ldr              VLO, [VB1, #(4*(6))]
   93 00000422 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
   94 00000424         
   95 00000424 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 00000428 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 0000042C F1CE 0E00       rsb              CF2, CF2, #0
   98 00000430 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000434 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 00000438         
  101 00000438 F8D1 30C4       ldr              VHI, [VB1, #(4*(32 + 23 - 6))]
  102 0000043C F8D1 0098       ldr              VLO, [VB1, #(4*(32 + 6))]
  103 00000440         
  104 00000440 FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000444 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 00000448 F1CE 0E00       rsb              CF2, CF2, #0
  107 0000044C FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 00000450 FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000454         
  203 00000454                 MC2S             7
   88 00000454         
   89 00000454         ; load data as far as possible in advance of using it
   90 00000454 F852 CB04       ldr              CF1, [COEF], #4
   91 00000458 F852 EB04       ldr              CF2, [COEF], #4
   92 0000045C 69C8            ldr              VLO, [VB1, #(4*(7))]
   93 0000045E 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
   94 00000460         
   95 00000460 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
   96 00000464 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
   97 00000468 F1CE 0E00       rsb              CF2, CF2, #0
   98 0000046C FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
   99 00000470 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  100 00000474         
  101 00000474 F8D1 30C0       ldr              VHI, [VB1, #(4*(32 + 23 - 7))]
  102 00000478 F8D1 009C       ldr              VLO, [VB1, #(4*(32 + 7))]
  103 0000047C         
  104 0000047C FBC3 890E       smlal            SUM1RL, SUM1RH, VHI, CF2
  105 00000480 FBC3 AB0C       smlal            SUM2RL, SUM2RH, VHI, CF1
  106 00000484 F1CE 0E00       rsb              CF2, CF2, #0
  107 00000488 FBC0 890C       smlal            SUM1RL, SUM1RH, VLO, CF1
  108 0000048C FBC0 AB0E       smlal            SUM2RL, SUM2RH, VLO, CF2
  109 00000490         
  204 00000490         
  205 00000490 F501 7180       add              VB1, VB1, #(4*64) ; vb1 += 64
  206 00000494         
  207 00000494 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  208 00000496 F44F 4EFE       mov              MAXPOS, #0x7f00
  209 0000049A F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  210 0000049E         



ARM Macro Assembler    Page 12 


  211 0000049E                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 0000049E         
   42 0000049E EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 000004A2 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 000004A6 EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 000004AA EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 000004AE BF18            it               ne
   47 000004B0 EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  212 000004B4                 C64TOS           SUM1RL, SUM1RH, SIGN, MAXPOS
   41 000004B4         
   42 000004B4 EA4F 6898       mov              SUM1RL, SUM1RL, lsr #(20+6)
   43 000004B8 EA48 1889       orr              SUM1RL, SUM1RL, SUM1RH, lsl #(1
2-6)
   44 000004BC EA4F 7CE8       mov              SIGN, SUM1RL, ASR #31
   45 000004C0 EBBC 3FE8       cmp              SIGN, SUM1RL, ASR #15
   46 000004C4 BF18            it               ne
   47 000004C6 EA8C 080E       eorne            SUM1RL, SIGN, MAXPOS
  213 000004CA                 C64TOS           SUM2LL, SUM2LH, SIGN, MAXPOS
   41 000004CA         
   42 000004CA EA4F 6696       mov              SUM2LL, SUM2LL, lsr #(20+6)
   43 000004CE EA46 1687       orr              SUM2LL, SUM2LL, SUM2LH, lsl #(1
2-6)
   44 000004D2 EA4F 7CE6       mov              SIGN, SUM2LL, ASR #31
   45 000004D6 EBBC 3FE6       cmp              SIGN, SUM2LL, ASR #15
   46 000004DA BF18            it               ne
   47 000004DC EA8C 060E       eorne            SUM2LL, SIGN, MAXPOS
  214 000004E0                 C64TOS           SUM2RL, SUM2RH, SIGN, MAXPOS
   41 000004E0         
   42 000004E0 EA4F 6A9A       mov              SUM2RL, SUM2RL, lsr #(20+6)
   43 000004E4 EA4A 1A8B       orr              SUM2RL, SUM2RL, SUM2RH, lsl #(1
2-6)
   44 000004E8 EA4F 7CEA       mov              SIGN, SUM2RL, ASR #31
   45 000004EC EBBC 3FEA       cmp              SIGN, SUM2RL, ASR #15
   46 000004F0 BF18            it               ne
   47 000004F2 EA8C 0A0E       eorne            SUM2RL, SIGN, MAXPOS
  215 000004F6         
  216 000004F6 F8DD C000       ldr              I, [sp, #0] ; load loop counter
                                                            
  217 000004FA EB00 0ECC       add              CF2, PCM, I, lsl #3 ; CF2 = PCM
                                                             + 4*i (short offse
                                                            t)
  218 000004FE F82E 6B02       strh             SUM2LL, [CF2], #2 ; *(pcm + 2*2
                                                            *i + 0)
  219 00000502 F82E AB02       strh             SUM2RL, [CF2], #2 ; *(pcm + 2*2
                                                            *i + 1)
  220 00000506         
  221 00000506 F820 4B02       strh             SUM1LL, [PCM], #2 ; *(pcm + 0)
  222 0000050A F820 8B02       strh             SUM1RL, [PCM], #2 ; *(pcm + 1)
  223 0000050E         
  224 0000050E F1BC 0C01       subs             I, I, #1
  225 00000512 F47F AEBA       bne              LoopPS
  226 00000516         
  227 00000516         ; restore stack pointer
  228 00000516 B002            add              sp, sp, #8
  229 00000518         
  230 00000518 E8BD 8FF0       ldmfd            sp!, {r4-r11, pc}
  231 0000051C         
  232 0000051C                 ENDP



ARM Macro Assembler    Page 13 


  233 0000051C         
  234 0000051C         ; MONO PROCESSING
  235 0000051C         
  236 0000051C         ; MC0M - process 2 taps, 1 sample (sample 0)
  237 0000051C         ;   x = vb1 offset
  238 0000051C                 MACRO
  239 0000051C                 MC0M             $x
  240 0000051C         
  241 0000051C                 ldr              CF1, [COEF], #4
  242 0000051C                 ldr              CF2, [COEF], #4
  243 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  244 0000051C                 ldr              VHI, [VB1, #(4*(23 - $x))]
  245 0000051C         
  246 0000051C                 rsb              CF2, CF2, #0
  247 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  248 0000051C                 smlal            SUM1LL, SUM1LH, VHI, CF2
  249 0000051C         
  250 0000051C                 MEND                         ; MC0M
  251 0000051C         
  252 0000051C         ; MC1M - process 2 taps, 1 sample (sample 16)
  253 0000051C         ;   x = vb1 offset
  254 0000051C                 MACRO
  255 0000051C                 MC1M             $x
  256 0000051C         
  257 0000051C                 ldr              CF1, [COEF], #4
  258 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  259 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  260 0000051C         
  261 0000051C                 MEND                         ; MC1M
  262 0000051C         
  263 0000051C         ; MC2M - process 2 taps, 2 samples
  264 0000051C         ;   x = vb1 offset
  265 0000051C                 MACRO
  266 0000051C                 MC2M             $x
  267 0000051C         
  268 0000051C         ; load data as far as possible in advance of using it
  269 0000051C                 ldr              CF1, [COEF], #4
  270 0000051C                 ldr              CF2, [COEF], #4
  271 0000051C                 ldr              VLO, [VB1, #(4*($x))]
  272 0000051C                 ldr              VHI, [VB1, #(4*(23 - $x))]
  273 0000051C         
  274 0000051C                 smlal            SUM1LL, SUM1LH, VLO, CF1
  275 0000051C                 smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000051C                 rsb              CF2, CF2, #0
  277 0000051C                 smlal            SUM1LL, SUM1LH, VHI, CF2
  278 0000051C                 smlal            SUM2LL, SUM2LH, VHI, CF1
  279 0000051C         
  280 0000051C                 MEND                         ; MC2M
  281 0000051C         
  282 0000051C         ; void PolyphaseMono(short *pcm, int *vbuf, const int *c
                       oefBase)
  283 0000051C         
  284 0000051C         xmp3_PolyphaseMono
                               PROC
  285 0000051C                 EXPORT           xmp3_PolyphaseMono
  286 0000051C         
  287 0000051C E92D 4FF0       stmfd            sp!, {r4-r11, r14}
  288 00000520         
  289 00000520         ; clear out stack space for 4 local variables (4 bytes e



ARM Macro Assembler    Page 14 


                       ach)
  290 00000520 B082            sub              sp, sp, #8
  291 00000522 9001            str              PCM, [sp, #4] ; sp[1] = pcm poi
                                                            nter
  292 00000524         
  293 00000524         ; special case, output sample 0
  294 00000524 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  295 00000528 F04F 0500       mov              SUM1LH, #0
  296 0000052C         
  297 0000052C                 MC0M             0
  240 0000052C         
  241 0000052C F852 CB04       ldr              CF1, [COEF], #4
  242 00000530 F852 EB04       ldr              CF2, [COEF], #4
  243 00000534 6808            ldr              VLO, [VB1, #(4*(0))]
  244 00000536 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
  245 00000538         
  246 00000538 F1CE 0E00       rsb              CF2, CF2, #0
  247 0000053C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 00000540 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 00000544         
  298 00000544                 MC0M             1
  240 00000544         
  241 00000544 F852 CB04       ldr              CF1, [COEF], #4
  242 00000548 F852 EB04       ldr              CF2, [COEF], #4
  243 0000054C 6848            ldr              VLO, [VB1, #(4*(1))]
  244 0000054E 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
  245 00000550         
  246 00000550 F1CE 0E00       rsb              CF2, CF2, #0
  247 00000554 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 00000558 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 0000055C         
  299 0000055C                 MC0M             2
  240 0000055C         
  241 0000055C F852 CB04       ldr              CF1, [COEF], #4
  242 00000560 F852 EB04       ldr              CF2, [COEF], #4
  243 00000564 6888            ldr              VLO, [VB1, #(4*(2))]
  244 00000566 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
  245 00000568         
  246 00000568 F1CE 0E00       rsb              CF2, CF2, #0
  247 0000056C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 00000570 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 00000574         
  300 00000574                 MC0M             3
  240 00000574         
  241 00000574 F852 CB04       ldr              CF1, [COEF], #4
  242 00000578 F852 EB04       ldr              CF2, [COEF], #4
  243 0000057C 68C8            ldr              VLO, [VB1, #(4*(3))]
  244 0000057E 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
  245 00000580         
  246 00000580 F1CE 0E00       rsb              CF2, CF2, #0
  247 00000584 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 00000588 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 0000058C         
  301 0000058C                 MC0M             4
  240 0000058C         
  241 0000058C F852 CB04       ldr              CF1, [COEF], #4
  242 00000590 F852 EB04       ldr              CF2, [COEF], #4
  243 00000594 6908            ldr              VLO, [VB1, #(4*(4))]



ARM Macro Assembler    Page 15 


  244 00000596 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
  245 00000598         
  246 00000598 F1CE 0E00       rsb              CF2, CF2, #0
  247 0000059C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 000005A0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 000005A4         
  302 000005A4                 MC0M             5
  240 000005A4         
  241 000005A4 F852 CB04       ldr              CF1, [COEF], #4
  242 000005A8 F852 EB04       ldr              CF2, [COEF], #4
  243 000005AC 6948            ldr              VLO, [VB1, #(4*(5))]
  244 000005AE 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
  245 000005B0         
  246 000005B0 F1CE 0E00       rsb              CF2, CF2, #0
  247 000005B4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 000005B8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 000005BC         
  303 000005BC                 MC0M             6
  240 000005BC         
  241 000005BC F852 CB04       ldr              CF1, [COEF], #4
  242 000005C0 F852 EB04       ldr              CF2, [COEF], #4
  243 000005C4 6988            ldr              VLO, [VB1, #(4*(6))]
  244 000005C6 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
  245 000005C8         
  246 000005C8 F1CE 0E00       rsb              CF2, CF2, #0
  247 000005CC FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 000005D0 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 000005D4         
  304 000005D4                 MC0M             7
  240 000005D4         
  241 000005D4 F852 CB04       ldr              CF1, [COEF], #4
  242 000005D8 F852 EB04       ldr              CF2, [COEF], #4
  243 000005DC 69C8            ldr              VLO, [VB1, #(4*(7))]
  244 000005DE 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
  245 000005E0         
  246 000005E0 F1CE 0E00       rsb              CF2, CF2, #0
  247 000005E4 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  248 000005E8 FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  249 000005EC         
  305 000005EC         
  306 000005EC 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  307 000005EE F44F 4EFE       mov              MAXPOS, #0x7f00
  308 000005F2 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  309 000005F6         
  310 000005F6                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 000005F6         
   42 000005F6 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 000005FA EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 000005FE EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 00000602 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 00000606 BF18            it               ne
   47 00000608 EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  311 0000060C 8004            strh             SUM1LL, [PCM, #(2*0)]
  312 0000060E         
  313 0000060E         ; special case, output sample 16
  314 0000060E F502 7270       add              COEF, COEF, #(4*(256-16)) ; coe
                                                            f = coefBase + 256 



ARM Macro Assembler    Page 16 


                                                            (was coefBase + 16 
                                                            after MC0M block)
  315 00000612 F501 5180       add              VB1, VB1, #(4*1024) ; vb1 = vbu
                                                            f + 64*16
  316 00000616         
  317 00000616 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  318 0000061A F04F 0500       mov              SUM1LH, #0
  319 0000061E         
  320 0000061E                 MC1M             0
  256 0000061E         
  257 0000061E F852 CB04       ldr              CF1, [COEF], #4
  258 00000622 6808            ldr              VLO, [VB1, #(4*(0))]
  259 00000624 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 00000628         
  321 00000628                 MC1M             1
  256 00000628         
  257 00000628 F852 CB04       ldr              CF1, [COEF], #4
  258 0000062C 6848            ldr              VLO, [VB1, #(4*(1))]
  259 0000062E FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 00000632         
  322 00000632                 MC1M             2
  256 00000632         
  257 00000632 F852 CB04       ldr              CF1, [COEF], #4
  258 00000636 6888            ldr              VLO, [VB1, #(4*(2))]
  259 00000638 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 0000063C         
  323 0000063C                 MC1M             3
  256 0000063C         
  257 0000063C F852 CB04       ldr              CF1, [COEF], #4
  258 00000640 68C8            ldr              VLO, [VB1, #(4*(3))]
  259 00000642 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 00000646         
  324 00000646                 MC1M             4
  256 00000646         
  257 00000646 F852 CB04       ldr              CF1, [COEF], #4
  258 0000064A 6908            ldr              VLO, [VB1, #(4*(4))]
  259 0000064C FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 00000650         
  325 00000650                 MC1M             5
  256 00000650         
  257 00000650 F852 CB04       ldr              CF1, [COEF], #4
  258 00000654 6948            ldr              VLO, [VB1, #(4*(5))]
  259 00000656 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 0000065A         
  326 0000065A                 MC1M             6
  256 0000065A         
  257 0000065A F852 CB04       ldr              CF1, [COEF], #4
  258 0000065E 6988            ldr              VLO, [VB1, #(4*(6))]
  259 00000660 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 00000664         
  327 00000664                 MC1M             7
  256 00000664         
  257 00000664 F852 CB04       ldr              CF1, [COEF], #4
  258 00000668 69C8            ldr              VLO, [VB1, #(4*(7))]
  259 0000066A FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  260 0000066E         
  328 0000066E         
  329 0000066E 9801            ldr              PCM, [sp, #4] 



ARM Macro Assembler    Page 17 


                                                            ; load pcm pointer
  330 00000670 F44F 4EFE       mov              MAXPOS, #0x7f00
  331 00000674 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  332 00000678         
  333 00000678                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 00000678         
   42 00000678 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 0000067C EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 00000680 EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 00000684 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 00000688 BF18            it               ne
   47 0000068A EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  334 0000068E         
  335 0000068E 8404            strh             SUM1LL, [PCM, #(2*16)]
  336 00000690         
  337 00000690         ; main convolution loop: sum1L = samples 1, 2, 3, ... 15
                          sum2L = samples 31, 30, ... 17
  338 00000690 F5A2 7278       sub              COEF, COEF, #(4*(264-16)) ; coe
                                                            f = coefBase + 16 (
                                                            was coefBase + 264 
                                                            after MC1M block)
  339 00000694 F5A1 6170       sub              VB1, VB1, #(4*(1024-64)) ; vb1 
                                                            = vbuf + 64 (was vb
                                                            uf + 64*16 after MC
                                                            1M block)
  340 00000698 F04F 0C0F       mov              I, #15      ; loop counter, cou
                                                            nt down
  341 0000069C F100 0002       add              PCM, PCM, #(2) ; pcm++
  342 000006A0         
  343 000006A0         LoopPM
  344 000006A0 F8CD C000       str              I, [sp, #0] ; sp[0] = i (loop c
                                                            ounter)
  345 000006A4 9001            str              PCM, [sp, #4] ; sp[1] = pcm (po
                                                            inter to pcm buffer
                                                            )
  346 000006A6         
  347 000006A6 F04F 7400       mov              SUM1LL, #RNDVAL ; load rndVal (
                                                            low 32)
  348 000006AA F04F 7600       mov              SUM2LL, #RNDVAL ; load rndVal (
                                                            low 32)
  349 000006AE F04F 0500       mov              SUM1LH, #0
  350 000006B2 F04F 0700       mov              SUM2LH, #0
  351 000006B6         
  352 000006B6                 MC2M             0
  267 000006B6         
  268 000006B6         ; load data as far as possible in advance of using it
  269 000006B6 F852 CB04       ldr              CF1, [COEF], #4
  270 000006BA F852 EB04       ldr              CF2, [COEF], #4
  271 000006BE 6808            ldr              VLO, [VB1, #(4*(0))]
  272 000006C0 6DCB            ldr              VHI, [VB1, #(4*(23 - 0))]
  273 000006C2         
  274 000006C2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 000006C6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 000006CA F1CE 0E00       rsb              CF2, CF2, #0
  277 000006CE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 000006D2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 000006D6         
  353 000006D6                 MC2M             1



ARM Macro Assembler    Page 18 


  267 000006D6         
  268 000006D6         ; load data as far as possible in advance of using it
  269 000006D6 F852 CB04       ldr              CF1, [COEF], #4
  270 000006DA F852 EB04       ldr              CF2, [COEF], #4
  271 000006DE 6848            ldr              VLO, [VB1, #(4*(1))]
  272 000006E0 6D8B            ldr              VHI, [VB1, #(4*(23 - 1))]
  273 000006E2         
  274 000006E2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 000006E6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 000006EA F1CE 0E00       rsb              CF2, CF2, #0
  277 000006EE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 000006F2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 000006F6         
  354 000006F6                 MC2M             2
  267 000006F6         
  268 000006F6         ; load data as far as possible in advance of using it
  269 000006F6 F852 CB04       ldr              CF1, [COEF], #4
  270 000006FA F852 EB04       ldr              CF2, [COEF], #4
  271 000006FE 6888            ldr              VLO, [VB1, #(4*(2))]
  272 00000700 6D4B            ldr              VHI, [VB1, #(4*(23 - 2))]
  273 00000702         
  274 00000702 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 00000706 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000070A F1CE 0E00       rsb              CF2, CF2, #0
  277 0000070E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 00000712 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 00000716         
  355 00000716                 MC2M             3
  267 00000716         
  268 00000716         ; load data as far as possible in advance of using it
  269 00000716 F852 CB04       ldr              CF1, [COEF], #4
  270 0000071A F852 EB04       ldr              CF2, [COEF], #4
  271 0000071E 68C8            ldr              VLO, [VB1, #(4*(3))]
  272 00000720 6D0B            ldr              VHI, [VB1, #(4*(23 - 3))]
  273 00000722         
  274 00000722 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 00000726 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000072A F1CE 0E00       rsb              CF2, CF2, #0
  277 0000072E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 00000732 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 00000736         
  356 00000736                 MC2M             4
  267 00000736         
  268 00000736         ; load data as far as possible in advance of using it
  269 00000736 F852 CB04       ldr              CF1, [COEF], #4
  270 0000073A F852 EB04       ldr              CF2, [COEF], #4
  271 0000073E 6908            ldr              VLO, [VB1, #(4*(4))]
  272 00000740 6CCB            ldr              VHI, [VB1, #(4*(23 - 4))]
  273 00000742         
  274 00000742 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 00000746 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000074A F1CE 0E00       rsb              CF2, CF2, #0
  277 0000074E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 00000752 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 00000756         
  357 00000756                 MC2M             5
  267 00000756         
  268 00000756         ; load data as far as possible in advance of using it
  269 00000756 F852 CB04       ldr              CF1, [COEF], #4



ARM Macro Assembler    Page 19 


  270 0000075A F852 EB04       ldr              CF2, [COEF], #4
  271 0000075E 6948            ldr              VLO, [VB1, #(4*(5))]
  272 00000760 6C8B            ldr              VHI, [VB1, #(4*(23 - 5))]
  273 00000762         
  274 00000762 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 00000766 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000076A F1CE 0E00       rsb              CF2, CF2, #0
  277 0000076E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 00000772 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 00000776         
  358 00000776                 MC2M             6
  267 00000776         
  268 00000776         ; load data as far as possible in advance of using it
  269 00000776 F852 CB04       ldr              CF1, [COEF], #4
  270 0000077A F852 EB04       ldr              CF2, [COEF], #4
  271 0000077E 6988            ldr              VLO, [VB1, #(4*(6))]
  272 00000780 6C4B            ldr              VHI, [VB1, #(4*(23 - 6))]
  273 00000782         
  274 00000782 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 00000786 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 0000078A F1CE 0E00       rsb              CF2, CF2, #0
  277 0000078E FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 00000792 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 00000796         
  359 00000796                 MC2M             7
  267 00000796         
  268 00000796         ; load data as far as possible in advance of using it
  269 00000796 F852 CB04       ldr              CF1, [COEF], #4
  270 0000079A F852 EB04       ldr              CF2, [COEF], #4
  271 0000079E 69C8            ldr              VLO, [VB1, #(4*(7))]
  272 000007A0 6C0B            ldr              VHI, [VB1, #(4*(23 - 7))]
  273 000007A2         
  274 000007A2 FBC0 450C       smlal            SUM1LL, SUM1LH, VLO, CF1
  275 000007A6 FBC0 670E       smlal            SUM2LL, SUM2LH, VLO, CF2
  276 000007AA F1CE 0E00       rsb              CF2, CF2, #0
  277 000007AE FBC3 450E       smlal            SUM1LL, SUM1LH, VHI, CF2
  278 000007B2 FBC3 670C       smlal            SUM2LL, SUM2LH, VHI, CF1
  279 000007B6         
  360 000007B6         
  361 000007B6 F501 7180       add              VB1, VB1, #(4*64) ; vb1 += 64
  362 000007BA         
  363 000007BA 9801            ldr              PCM, [sp, #4] 
                                                            ; load pcm pointer
  364 000007BC F44F 4EFE       mov              MAXPOS, #0x7f00
  365 000007C0 F04E 0EFF       orr              MAXPOS, MAXPOS, #0xff
  366 000007C4         
  367 000007C4                 C64TOS           SUM1LL, SUM1LH, SIGN, MAXPOS
   41 000007C4         
   42 000007C4 EA4F 6494       mov              SUM1LL, SUM1LL, lsr #(20+6)
   43 000007C8 EA44 1485       orr              SUM1LL, SUM1LL, SUM1LH, lsl #(1
2-6)
   44 000007CC EA4F 7CE4       mov              SIGN, SUM1LL, ASR #31
   45 000007D0 EBBC 3FE4       cmp              SIGN, SUM1LL, ASR #15
   46 000007D4 BF18            it               ne
   47 000007D6 EA8C 040E       eorne            SUM1LL, SIGN, MAXPOS
  368 000007DA                 C64TOS           SUM2LL, SUM2LH, SIGN, MAXPOS
   41 000007DA         
   42 000007DA EA4F 6696       mov              SUM2LL, SUM2LL, lsr #(20+6)
   43 000007DE EA46 1687       orr              SUM2LL, SUM2LL, SUM2LH, lsl #(1



ARM Macro Assembler    Page 20 


2-6)
   44 000007E2 EA4F 7CE6       mov              SIGN, SUM2LL, ASR #31
   45 000007E6 EBBC 3FE6       cmp              SIGN, SUM2LL, ASR #15
   46 000007EA BF18            it               ne
   47 000007EC EA8C 060E       eorne            SUM2LL, SIGN, MAXPOS
  369 000007F0         
  370 000007F0 F8DD C000       ldr              I, [sp, #0] ; load loop counter
                                                            */
  371 000007F4 EB00 0E8C       add              CF2, PCM, I, lsl #2 ; CF2 = PCM
                                                             + 2*i (short offse
                                                            t)*/
  372 000007F8 F82E 6B02       strh             SUM2LL, [CF2], #2 
                                                            ; (pcm + 2*i + 0)
  373 000007FC F820 4B02       strh             SUM1LL, [PCM], #2 
                                                            ; (pcm + 0) ; pcm++
                                                            
  374 00000800         
  375 00000800 F1BC 0C01       subs             I, I, #1
  376 00000804 F47F AF4C       bne              LoopPM
  377 00000808         
  378 00000808         ; restore stack pointer
  379 00000808 B002            add              sp, sp, #8
  380 0000080A         
  381 0000080A E8BD 8FF0       ldmfd            sp!, {r4-r11, pc}
  382 0000080E                 ENDP
  383 0000080E         
  384 0000080E                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=sd_mp3_rc\asmpoly_thumb2_rvds.d -osd_mp3_rc\asmpoly_thumb2_rvds.o 
-I.\RTE\_SD_MP3_RC -IC:\Users\briansuneZ\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.
0\CMSIS\Core\Include -IC:\Users\briansuneZ\AppData\Local\Arm\Packs\Keil\STM32F1
xx_DFP\2.3.0\Device\Include --predefine="__MICROLIB SETA 1" --predefine="__UVIS
ION_VERSION SETA 533" --predefine="_RTE_ SETA 1" --predefine="STM32F10X_HD SETA
 1" --predefine="_RTE_ SETA 1" --list=asmpoly_thumb2_rvds.lst ..\Drivers\mp3\he
lix\arm\asmpoly_thumb2_rvds.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
   Uses
      None
Comment: .text unused
LoopPM 000006A0

Symbol: LoopPM
   Definitions
      At line 343 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
   Uses
      At line 376 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
Comment: LoopPM used once
LoopPS 0000028A

Symbol: LoopPS
   Definitions
      At line 182 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
   Uses
      At line 225 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
Comment: LoopPS used once
xmp3_PolyphaseMono 0000051C

Symbol: xmp3_PolyphaseMono
   Definitions
      At line 284 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
   Uses
      At line 285 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
Comment: xmp3_PolyphaseMono used once
xmp3_PolyphaseStereo 00000000

Symbol: xmp3_PolyphaseStereo
   Definitions
      At line 114 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
   Uses
      At line 115 in file ..\Drivers\mp3\helix\arm\asmpoly_thumb2_rvds.s
Comment: xmp3_PolyphaseStereo used once
5 symbols
358 symbols in table
